package com.hardrize.originsimprovements.abilities;

import com.destroystokyo.paper.event.server.ServerTickEndEvent;
import com.starshootercity.OriginsReborn;
import com.starshootercity.abilities.types.VisibleAbility;
import com.starshootercity.util.config.ConfigManager.SettingType;
import net.kyori.adventure.key.Key;
import org.bukkit.Bukkit;
import org.bukkit.NamespacedKey;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.plugin.java.JavaPlugin;
import org.jetbrains.annotations.NotNull;

import java.util.*;

public class WaterVulnerability implements Listener, VisibleAbility {
    private final Map<Player, Integer> lastWaterDamagedMap = new HashMap<>();
    private final String immunityItemsConfig = "immunity_nexo_ids";
    private int damageAmount;

    @NotNull
    public Key getKey() {
        return Key.key("originsimprovements:water_vulnerability");
    }

    public String description() {
        return "You receive damage over time while in contact with water. Can be protected by holding certain items.";
    }

    public String title() {
        return "Hydrophobia";
    }

    @EventHandler
    public void onServerTickEnd(ServerTickEndEvent event) {
        Iterator var2 = Bukkit.getOnlinePlayers().iterator();

        while (var2.hasNext()) {
            Player p = (Player) var2.next();
            this.runForAbility(p, (player) -> {
                if (Bukkit.getCurrentTick() - this.lastWaterDamagedMap.getOrDefault(player, Bukkit.getCurrentTick() - 20) >= 20) {
                    boolean shouldDamage = player.isInWater() || OriginsReborn.getMVE().wasTouchingWater(player);

                    if (player.isInRain()) {
                        if (!hasImmunityItem(player)) {
                            shouldDamage = true;
                        }
                    }

                    if (shouldDamage) {
                        OriginsReborn.getMVE().dealFreezeDamage(player, this.damageAmount);
                        this.lastWaterDamagedMap.put(player, Bukkit.getCurrentTick());
                    }
                }
            });
        }
    }

    private boolean hasImmunityItem(Player player) {
        List<String> immunityIdsList = this.getConfigOption(
                immunityItemsConfig,
                SettingType.STRING_LIST
        );

        if (immunityIdsList == null || immunityIdsList.isEmpty()) {
            return false;
        }

        ItemStack mainHand = player.getInventory().getItemInMainHand();
        ItemStack offHand = player.getInventory().getItemInOffHand();

        if (checkNexoItem(mainHand, immunityIdsList)) {
            return true;
        }

        return checkNexoItem(offHand, immunityIdsList);
    }

    private boolean checkNexoItem(ItemStack item, List<String> allowedIds) {
        if (item == null || item.getType().isAir()) {
            return false;
        }

        ItemMeta meta = item.getItemMeta();
        if (meta == null) {
            return false;
        }

        PersistentDataContainer container = meta.getPersistentDataContainer();

        NamespacedKey nexoKey = new NamespacedKey("nexo", "id");

        if (container.has(nexoKey, PersistentDataType.STRING)) {
            String nexoId = container.get(nexoKey, PersistentDataType.STRING);
            return allowedIds.contains(nexoId);
        }

        return false;
    }

    public void initialize(JavaPlugin plugin) {
        this.damageAmount = this.registerConfigOption(
                plugin,
                "damage_amount",
                Collections.singletonList("Amount of damage to take in water"),
                SettingType.INTEGER,
                1
        );

        this.registerConfigOption(
                plugin,
                immunityItemsConfig,
                Collections.singletonList("List of Nexo item IDs that provide immunity from water damage when held"),
                SettingType.STRING_LIST,
                Collections.singletonList("umbrella")
        );
    }
}